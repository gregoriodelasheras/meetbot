{"version":3,"sources":["Event.js","EventList.js","CitySearch.js","NumberOfEvents.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Event","handleToggleEvent","setState","isCollapsed","state","showCollapsedEvent","event","props","className","href","htmlLink","target","rel","description","status","this","summary","start","dateTime","timeZone","end","location","type","onClick","Component","EventList","events","map","id","CitySearch","handleInputChanged","value","suggestions","locations","filter","toUpperCase","indexOf","query","handleItemClicked","suggestion","onChange","NumberOfEvents","handleNumberChanged","numberEvents","min","max","App","Boolean","window","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.326c5726.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Event extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      isCollapsed: true,\r\n    };\r\n  }\r\n\r\n  handleToggleEvent = () => {\r\n    this.setState({\r\n      isCollapsed: this.state.isCollapsed === true ? false : true,\r\n    });\r\n  };\r\n\r\n  showCollapsedEvent = () => {\r\n    const { event } = this.props;\r\n\r\n    if (this.state.isCollapsed === false) {\r\n      return (\r\n        <div className='event-details'>\r\n          <h3>About event:</h3>\r\n          <a\r\n            href={event.htmlLink}\r\n            className='event-link'\r\n            target='_blank'\r\n            rel='noreferrer'>\r\n            See details on Google Calendar\r\n          </a>\r\n          <p className='event-description'>{event.description}</p>\r\n          <p className='event-status'>{event.status}</p>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { event } = this.props;\r\n\r\n    return (\r\n      <Event>\r\n        <h2 className='event-summary'>{event.summary}</h2>\r\n        <p className='event-start-date'>\r\n          {event.start.dateTime}, {event.start.timeZone}\r\n        </p>\r\n        <p className='event-end-date'>\r\n          {event.end.dateTime}, {event.end.timeZone}\r\n        </p>\r\n        <p className='event-location'>{event.location}</p>\r\n        <button\r\n          type='button'\r\n          className='btn-toggle-event'\r\n          onClick={this.handleToggleEvent}>\r\n          Details\r\n        </button>\r\n        {this.showCollapsedEvent()}\r\n      </Event>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Event;\r\n","import React, { Component } from 'react';\r\nimport Event from './Event';\r\n\r\nclass EventList extends Component {\r\n  render() {\r\n    const { events } = this.props;\r\n    return (\r\n      <ul className='EventList'>\r\n        {events.map((event) => (\r\n          <li key={event.id}>\r\n            <Event event={event} />\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventList;\r\n","import React, { Component } from 'react';\r\n\r\nclass CitySearch extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      query: '',\r\n      suggestions: [],\r\n    };\r\n  }\r\n\r\n  handleInputChanged = (event) => {\r\n    const value = event.target.value;\r\n    const suggestions = this.props.locations.filter((location) => {\r\n      return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\r\n    });\r\n\r\n    this.setState({\r\n      query: value,\r\n      suggestions,\r\n    });\r\n  };\r\n\r\n  handleItemClicked = (suggestion) => {\r\n    this.setState({\r\n      query: suggestion,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className='CitySearch'>\r\n        <input\r\n          type='text'\r\n          className='city'\r\n          value={this.state.query}\r\n          onChange={this.handleInputChanged}\r\n        />\r\n        <ul className='suggestions'>\r\n          {this.state.suggestions.map((suggestion) => (\r\n            <li\r\n              key={suggestion}\r\n              onClick={() => this.handleItemClicked(suggestion)}>\r\n              {suggestion}\r\n            </li>\r\n          ))}\r\n          <li key='all'>\r\n            <b>See all cities</b>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CitySearch;\r\n","import React, { Component } from 'react';\r\n\r\nclass NumberOfEvents extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      numberEvents: 32,\r\n    };\r\n  }\r\n\r\n  handleNumberChanged = (event) => {\r\n    const value = event.target.value;\r\n\r\n    this.setState({\r\n      numberEvents: value,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className='number-events'>\r\n        <h2>Number of events</h2>\r\n        <input\r\n          type='number'\r\n          className='input-number-events'\r\n          min='1'\r\n          max='32'\r\n          value={this.state.numberEvents}\r\n          onChange={this.handleNumberChanged}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NumberOfEvents;\r\n","import React, { Component } from 'react';\n// import logo from '../public/img/Meetbot.svg';\nimport './App.css';\nimport EventList from './EventList';\nimport CitySearch from './CitySearch';\nimport NumberOfEvents from './NumberOfEvents';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <h1>Meetbot</h1>\n        <CitySearch />\n        <NumberOfEvents />\n        <EventList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}